/*
 * This file is generated by jOOQ.
 */
package org.jooq.mcve.kotlin.tables.records


import java.time.OffsetDateTime

import org.jooq.Field
import org.jooq.Record2
import org.jooq.Row2
import org.jooq.impl.TableRecordImpl
import org.jooq.mcve.kotlin.tables.Test


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class TestRecord() : TableRecordImpl<TestRecord>(Test.TEST), Record2<OffsetDateTime?, OffsetDateTime?> {

    var domaintsvalue: OffsetDateTime?
        set(value) = set(0, value)
        get() = get(0) as OffsetDateTime?

    var localtsvalue: OffsetDateTime?
        set(value) = set(1, value)
        get() = get(1) as OffsetDateTime?

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row2<OffsetDateTime?, OffsetDateTime?> = super.fieldsRow() as Row2<OffsetDateTime?, OffsetDateTime?>
    override fun valuesRow(): Row2<OffsetDateTime?, OffsetDateTime?> = super.valuesRow() as Row2<OffsetDateTime?, OffsetDateTime?>
    override fun field1(): Field<OffsetDateTime?> = Test.TEST.DOMAINTSVALUE
    override fun field2(): Field<OffsetDateTime?> = Test.TEST.LOCALTSVALUE
    override fun component1(): OffsetDateTime? = domaintsvalue
    override fun component2(): OffsetDateTime? = localtsvalue
    override fun value1(): OffsetDateTime? = domaintsvalue
    override fun value2(): OffsetDateTime? = localtsvalue

    override fun value1(value: OffsetDateTime?): TestRecord {
        this.domaintsvalue = value
        return this
    }

    override fun value2(value: OffsetDateTime?): TestRecord {
        this.localtsvalue = value
        return this
    }

    override fun values(value1: OffsetDateTime?, value2: OffsetDateTime?): TestRecord {
        this.value1(value1)
        this.value2(value2)
        return this
    }

    /**
     * Create a detached, initialised TestRecord
     */
    constructor(domaintsvalue: OffsetDateTime? = null, localtsvalue: OffsetDateTime? = null): this() {
        this.domaintsvalue = domaintsvalue
        this.localtsvalue = localtsvalue
    }
}
