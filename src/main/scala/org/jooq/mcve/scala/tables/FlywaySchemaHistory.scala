/*
 * This file is generated by jOOQ.
 */
package org.jooq.mcve.scala.tables


import java.lang.Boolean
import java.lang.Class
import java.lang.Integer
import java.lang.String
import java.time.LocalDateTime
import java.util.Arrays
import java.util.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row10
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.jooq.mcve.scala.Indexes
import org.jooq.mcve.scala.Keys
import org.jooq.mcve.scala.Public
import org.jooq.mcve.scala.tables.records.FlywaySchemaHistoryRecord

import scala.Array


object FlywaySchemaHistory {

  /**
   * The reference instance of <code>PUBLIC.flyway_schema_history</code>
   */
  val FLYWAY_SCHEMA_HISTORY = new FlywaySchemaHistory
}

/**
 * This class is generated by jOOQ.
 */
class FlywaySchemaHistory(
  alias: Name,
  child: Table[_ <: Record],
  path: ForeignKey[_ <: Record, FlywaySchemaHistoryRecord],
  aliased: Table[FlywaySchemaHistoryRecord],
  parameters: Array[ Field[_] ]
)
extends TableImpl[FlywaySchemaHistoryRecord](
  alias,
  Public.PUBLIC,
  child,
  path,
  aliased,
  parameters,
  DSL.comment(""),
  TableOptions.table
) {

  /**
   * The class holding records for this type
   */
  override def getRecordType: Class[FlywaySchemaHistoryRecord] = classOf[FlywaySchemaHistoryRecord]

  /**
   * The column <code>PUBLIC.flyway_schema_history.installed_rank</code>.
   */
  val INSTALLED_RANK: TableField[FlywaySchemaHistoryRecord, Integer] = createField(DSL.name("installed_rank"), SQLDataType.INTEGER.nullable(false), "")

  /**
   * The column <code>PUBLIC.flyway_schema_history.version</code>.
   */
  val VERSION: TableField[FlywaySchemaHistoryRecord, String] = createField(DSL.name("version"), SQLDataType.VARCHAR(50), "")

  /**
   * The column <code>PUBLIC.flyway_schema_history.description</code>.
   */
  val DESCRIPTION: TableField[FlywaySchemaHistoryRecord, String] = createField(DSL.name("description"), SQLDataType.VARCHAR(200).nullable(false), "")

  /**
   * The column <code>PUBLIC.flyway_schema_history.type</code>.
   */
  val TYPE: TableField[FlywaySchemaHistoryRecord, String] = createField(DSL.name("type"), SQLDataType.VARCHAR(20).nullable(false), "")

  /**
   * The column <code>PUBLIC.flyway_schema_history.script</code>.
   */
  val SCRIPT: TableField[FlywaySchemaHistoryRecord, String] = createField(DSL.name("script"), SQLDataType.VARCHAR(1000).nullable(false), "")

  /**
   * The column <code>PUBLIC.flyway_schema_history.checksum</code>.
   */
  val CHECKSUM: TableField[FlywaySchemaHistoryRecord, Integer] = createField(DSL.name("checksum"), SQLDataType.INTEGER, "")

  /**
   * The column <code>PUBLIC.flyway_schema_history.installed_by</code>.
   */
  val INSTALLED_BY: TableField[FlywaySchemaHistoryRecord, String] = createField(DSL.name("installed_by"), SQLDataType.VARCHAR(100).nullable(false), "")

  /**
   * The column <code>PUBLIC.flyway_schema_history.installed_on</code>.
   */
  val INSTALLED_ON: TableField[FlywaySchemaHistoryRecord, LocalDateTime] = createField(DSL.name("installed_on"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), "")

  /**
   * The column <code>PUBLIC.flyway_schema_history.execution_time</code>.
   */
  val EXECUTION_TIME: TableField[FlywaySchemaHistoryRecord, Integer] = createField(DSL.name("execution_time"), SQLDataType.INTEGER.nullable(false), "")

  /**
   * The column <code>PUBLIC.flyway_schema_history.success</code>.
   */
  val SUCCESS: TableField[FlywaySchemaHistoryRecord, Boolean] = createField(DSL.name("success"), SQLDataType.BOOLEAN.nullable(false), "")

  private def this(alias: Name, aliased: Table[FlywaySchemaHistoryRecord]) = this(alias, null, null, aliased, null)

  /**
   * Create an aliased <code>PUBLIC.flyway_schema_history</code> table reference
   */
  def this(alias: String) = this(DSL.name(alias), org.jooq.mcve.scala.tables.FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY)

  /**
   * Create an aliased <code>PUBLIC.flyway_schema_history</code> table reference
   */
  def this(alias: Name) = this(alias, org.jooq.mcve.scala.tables.FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY)

  /**
   * Create a <code>PUBLIC.flyway_schema_history</code> table reference
   */
  def this() = this(DSL.name("flyway_schema_history"), null)

  def this(child: Table[_ <: Record], key: ForeignKey[_ <: Record, FlywaySchemaHistoryRecord]) = this(Internal.createPathAlias(child, key), child, key, org.jooq.mcve.scala.tables.FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY, null)

  override def getSchema: Schema = Public.PUBLIC

  override def getIndexes: List[Index] = Arrays.asList[ Index ](Indexes.FLYWAY_SCHEMA_HISTORY_S_IDX)

  override def getPrimaryKey: UniqueKey[FlywaySchemaHistoryRecord] = Keys.FLYWAY_SCHEMA_HISTORY_PK

  override def getKeys: List[ UniqueKey[FlywaySchemaHistoryRecord] ] = Arrays.asList[ UniqueKey[FlywaySchemaHistoryRecord] ](Keys.FLYWAY_SCHEMA_HISTORY_PK)
  override def as(alias: String): FlywaySchemaHistory = new FlywaySchemaHistory(DSL.name(alias), this)
  override def as(alias: Name): FlywaySchemaHistory = new FlywaySchemaHistory(alias, this)

  /**
   * Rename this table
   */
  override def rename(name: String): FlywaySchemaHistory = new FlywaySchemaHistory(DSL.name(name), null)

  /**
   * Rename this table
   */
  override def rename(name: Name): FlywaySchemaHistory = new FlywaySchemaHistory(name, null)

  // -------------------------------------------------------------------------
  // Row10 type methods
  // -------------------------------------------------------------------------
  override def fieldsRow: Row10[Integer, String, String, String, String, Integer, String, LocalDateTime, Integer, Boolean] = super.fieldsRow.asInstanceOf[ Row10[Integer, String, String, String, String, Integer, String, LocalDateTime, Integer, Boolean] ]
}
