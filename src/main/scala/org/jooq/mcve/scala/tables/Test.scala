/*
 * This file is generated by jOOQ.
 */
package org.jooq.mcve.scala.tables


import java.lang.Class
import java.lang.String
import java.time.OffsetDateTime

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row2
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.jooq.mcve.scala.Public
import org.jooq.mcve.scala.tables.records.TestRecord

import scala.Array


object Test {

  /**
   * The reference instance of <code>PUBLIC.TEST</code>
   */
  val TEST = new Test
}

/**
 * This class is generated by jOOQ.
 */
class Test(
  alias: Name,
  child: Table[_ <: Record],
  path: ForeignKey[_ <: Record, TestRecord],
  aliased: Table[TestRecord],
  parameters: Array[ Field[_] ]
)
extends TableImpl[TestRecord](
  alias,
  Public.PUBLIC,
  child,
  path,
  aliased,
  parameters,
  DSL.comment(""),
  TableOptions.table
) {

  /**
   * The class holding records for this type
   */
  override def getRecordType: Class[TestRecord] = classOf[TestRecord]

  /**
   * The column <code>PUBLIC.TEST.DOMAINTSVALUE</code>.
   */
  val DOMAINTSVALUE: TableField[TestRecord, OffsetDateTime] = createField(DSL.name("DOMAINTSVALUE"), org.jooq.mcve.scala.Domains.DOMAINTS.getDataType(), "")

  /**
   * The column <code>PUBLIC.TEST.LOCALTSVALUE</code>.
   */
  val LOCALTSVALUE: TableField[TestRecord, OffsetDateTime] = createField(DSL.name("LOCALTSVALUE"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), "")

  private def this(alias: Name, aliased: Table[TestRecord]) = this(alias, null, null, aliased, null)

  /**
   * Create an aliased <code>PUBLIC.TEST</code> table reference
   */
  def this(alias: String) = this(DSL.name(alias), org.jooq.mcve.scala.tables.Test.TEST)

  /**
   * Create an aliased <code>PUBLIC.TEST</code> table reference
   */
  def this(alias: Name) = this(alias, org.jooq.mcve.scala.tables.Test.TEST)

  /**
   * Create a <code>PUBLIC.TEST</code> table reference
   */
  def this() = this(DSL.name("TEST"), null)

  def this(child: Table[_ <: Record], key: ForeignKey[_ <: Record, TestRecord]) = this(Internal.createPathAlias(child, key), child, key, org.jooq.mcve.scala.tables.Test.TEST, null)

  override def getSchema: Schema = Public.PUBLIC
  override def as(alias: String): Test = new Test(DSL.name(alias), this)
  override def as(alias: Name): Test = new Test(alias, this)

  /**
   * Rename this table
   */
  override def rename(name: String): Test = new Test(DSL.name(name), null)

  /**
   * Rename this table
   */
  override def rename(name: Name): Test = new Test(name, null)

  // -------------------------------------------------------------------------
  // Row2 type methods
  // -------------------------------------------------------------------------
  override def fieldsRow: Row2[OffsetDateTime, OffsetDateTime] = super.fieldsRow.asInstanceOf[ Row2[OffsetDateTime, OffsetDateTime] ]
}
