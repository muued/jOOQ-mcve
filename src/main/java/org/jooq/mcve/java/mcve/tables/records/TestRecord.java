/*
 * This file is generated by jOOQ.
 */
package org.jooq.mcve.java.mcve.tables.records;


import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.mcve.java.mcve.tables.Test;
import org.jooq.mcve.java.public_.enums.Enumdomain;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TestRecord extends UpdatableRecordImpl<TestRecord> implements Record3<Integer, Enumdomain, Object> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>MCVE.TEST.ID</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>MCVE.TEST.ID</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>MCVE.TEST.PROBLEMCOLUMN</code>.
     */
    public void setProblemcolumn(Enumdomain value) {
        set(1, value);
    }

    /**
     * Getter for <code>MCVE.TEST.PROBLEMCOLUMN</code>.
     */
    public Enumdomain getProblemcolumn() {
        return (Enumdomain) get(1);
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public void setNotbetter(Object value) {
        set(2, value);
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public Object getNotbetter() {
        return get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, Enumdomain, Object> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Integer, Enumdomain, Object> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Test.TEST.ID;
    }

    @Override
    public Field<Enumdomain> field2() {
        return Test.TEST.PROBLEMCOLUMN;
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    @Override
    public Field<Object> field3() {
        return Test.TEST.NOTBETTER;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public Enumdomain component2() {
        return getProblemcolumn();
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    @Override
    public Object component3() {
        return getNotbetter();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public Enumdomain value2() {
        return getProblemcolumn();
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    @Override
    public Object value3() {
        return getNotbetter();
    }

    @Override
    public TestRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public TestRecord value2(Enumdomain value) {
        setProblemcolumn(value);
        return this;
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    @Override
    public TestRecord value3(Object value) {
        setNotbetter(value);
        return this;
    }

    @Override
    public TestRecord values(Integer value1, Enumdomain value2, Object value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TestRecord
     */
    public TestRecord() {
        super(Test.TEST);
    }

    /**
     * Create a detached, initialised TestRecord
     */
    public TestRecord(Integer id, Enumdomain problemcolumn, Object notbetter) {
        super(Test.TEST);

        setId(id);
        setProblemcolumn(problemcolumn);
        setNotbetter(notbetter);
    }
}
